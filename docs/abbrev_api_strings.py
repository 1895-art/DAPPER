#!/usr/bin/env python3
# *_* coding: utf-8 *_*

"""Abbreviate header strings generated by sphinx-apidoc.

Based on fileops.py script.
"""

import os
#import sys
from subprocess import check_output, call
import re

LOCKED = False # failsafe on top of dry_run for replacement

wd = "_modules"
rex=r"^dapper.*\.(.*) \w+"
rep=r"\1"

# Exclude: dirs
dx=[]
# Exclude: files
fx=[os.path.basename(__file__)]
# Exclude: compared to full path
ax=[]
# Include (only) files
fi=[]

FTMP = 'tmp_fileops_grep'

def grep(dry_run=True,do_print=True):

  for root, dirs, files in os.walk(wd):             # Walk dirs
    if any([s in root for s in dx]): continue       # exclude dirs
    for f in files:                                 # Loop files
      f_full = os.path.join(root,f)                 # add dirpath
      if any([s in f_full for s in ax]): continue   # exclude full path
      if any([s in f      for s in fx]): continue   # exclude files
      if fi==[] or any([s in f for s in fi]):       # include files

        nfound = 0 # num of match in file
        with open(f_full) as orig, open(FTMP,'w') as tmp:
          try:
            for i,line in enumerate(orig):
                m = re.search(rex,line)
                if m:
                  nfound += 1
                  if rep is None:
                    newline = None
                  else:
                    newline = re.sub(rex, rep, line)
                    tmp.write(newline)
                  if do_print:
                    f_rel = os.path.relpath(f_full,wd)
                    print_match(f_rel,i,line,m,newline)
                elif rep is not None:
                  tmp.write(line)
          except UnicodeDecodeError:
            pass

        # Replace file
        if dry_run:    os.remove(FTMP)
        elif nfound>0: os.rename(FTMP, f_full)
  
  # Repeat (recurse once) to effectuate changes
  if dry_run and rep is not None and LOCKED is False:
    print("Are you sure you want to make these changes? [y/n]: ", end="")
    yn = input().lower()
    if yn in ['y', 'ye', 'yes']:
      grep(dry_run=False,do_print=False)
      print("Changes done.")
    else:
      print("User abort. No changes made.")


def print_c(*kargs,color='blue',**kwargs):
  if   color=='blue':  cc = '\033[94m'
  elif color=='green': cc = '\033[92m'
  elif color=='bold':  cc = '\033[1m' 
  s = ' '.join([str(k) for k in kargs])
  print(cc + s + '\033[0m', **kwargs)

def print_match(path,i,line,match,newline=None):
  info = path.ljust(40) + ' '+str(i).ljust(4)+': '
  print(info                         ,end ='')
  print(line[:match.span()[0]]       ,end ='')
  print_c(match.group(),color='green',end ='')
  print(line[match.span()[1]:]       ,end ='')
  if newline is not None:
    arrow = '--> '
    print(' '*(len(info)-len(arrow)) + arrow + newline, end='')


if __name__ == '__main__':
  grep(dry_run=False)



